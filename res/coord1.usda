#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.2.2 LTS"
    endTimeCode = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    float3 xformOp:rotateXYZ = (-90, -0, 0)
    uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]

    def SkelRoot "Armature_Object"
    {
        float3 xformOp:rotateXYZ.timeSamples = {
            1: (0, -0, 0),
        }
        float3 xformOp:scale.timeSamples = {
            1: (1, 1, 1),
        }
        double3 xformOp:translate.timeSamples = {
            1: (0, 0, 0),
        }
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Skeleton "Armature_Skeleton" (
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (0, 0, -1, 1) ), ( (0, 4.371138828673793e-8, -1, 0), (1, 0, 0, 0), (0, -1, -4.371138828673793e-8, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (0, 0, 0, 1) )]
            uniform token[] joints = ["Bone", "Bone/Bone_X", "Bone/Bone_Y", "Bone/Bone_Z"]
            uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (0, 0, -1, 1) ), ( (0, -1, -4.371138828673793e-8, 0), (1, 0, 0, 0), (0, -4.371138828673793e-8, 1, 0), (0, 1, 0, 1) ), ( (1, 0, 0, 0), (0, 0, -1, 0), (0, 1, 0, 0), (0, 1, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 1, 0, 1) )]
            rel skel:animationSource = </root/Armature_Object/Armature_Skeleton/Anim>

            def SkelAnimation "Anim"
            {
                uniform token[] joints = ["Bone", "Bone/Bone_X", "Bone/Bone_Y", "Bone/Bone_Z"]
                quatf[] rotations.timeSamples = {
                    1: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    2: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    3: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    4: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    5: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    6: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    7: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    8: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    9: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    10: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    11: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    12: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    13: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    14: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    15: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    16: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    17: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    18: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    19: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    20: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    21: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    22: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    23: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    24: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                }
                half3[] scales.timeSamples = {
                    1: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    2: [(1, 1, 1), (1, 1.00488, 1), (1, 1.00488, 1), (1, 1.00488, 1)],
                    3: [(1, 1, 1), (1, 1.01758, 1), (1, 1.01758, 1), (1, 1.01758, 1)],
                    4: [(1, 1, 1), (1, 1.03613, 1), (1, 1.03613, 1), (1, 1.03613, 1)],
                    5: [(1, 1, 1), (1, 1.06055, 1), (1, 1.06055, 1), (1, 1.06055, 1)],
                    6: [(1, 1, 1), (1, 1.08594, 1), (1, 1.08594, 1), (1, 1.08594, 1)],
                    7: [(1, 1, 1), (1, 1.11328, 1), (1, 1.11328, 1), (1, 1.11328, 1)],
                    8: [(1, 1, 1), (1, 1.13965, 1), (1, 1.13965, 1), (1, 1.13965, 1)],
                    9: [(1, 1, 1), (1, 1.16309, 1), (1, 1.16309, 1), (1, 1.16309, 1)],
                    10: [(1, 1, 1), (1, 1.18262, 1), (1, 1.18262, 1), (1, 1.18262, 1)],
                    11: [(1, 1, 1), (1, 1.19531, 1), (1, 1.19531, 1), (1, 1.19531, 1)],
                    12: [(1, 1, 1), (1, 1.2002, 1), (1, 1.2002, 1), (1, 1.2002, 1)],
                    13: [(1, 1, 1), (1, 1.19629, 1), (1, 1.19629, 1), (1, 1.19629, 1)],
                    14: [(1, 1, 1), (1, 1.18555, 1), (1, 1.18555, 1), (1, 1.18555, 1)],
                    15: [(1, 1, 1), (1, 1.16895, 1), (1, 1.16895, 1), (1, 1.16895, 1)],
                    16: [(1, 1, 1), (1, 1.14844, 1), (1, 1.14844, 1), (1, 1.14844, 1)],
                    17: [(1, 1, 1), (1, 1.125, 1), (1, 1.125, 1), (1, 1.125, 1)],
                    18: [(1, 1, 1), (1, 1.09961, 1), (1, 1.09961, 1), (1, 1.09961, 1)],
                    19: [(1, 1, 1), (1, 1.0752, 1), (1, 1.0752, 1), (1, 1.0752, 1)],
                    20: [(1, 1, 1), (1, 1.05176, 1), (1, 1.05176, 1), (1, 1.05176, 1)],
                    21: [(1, 1, 1), (1, 1.03125, 1), (1, 1.03125, 1), (1, 1.03125, 1)],
                    22: [(1, 1, 1), (1, 1.01465, 1), (1, 1.01465, 1), (1, 1.01465, 1)],
                    23: [(1, 1, 1), (1, 1.00391, 1), (1, 1.00391, 1), (1, 1.00391, 1)],
                    24: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                }
                float3[] translations.timeSamples = {
                    1: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    2: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    3: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    4: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    5: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    6: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    7: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    8: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    9: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    10: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    11: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    12: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    13: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    14: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    15: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    16: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    17: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    18: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    19: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    20: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    21: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    22: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    23: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    24: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                }
            }
        }

        def Xform "Coord_Object"
        {
            def Mesh "Coord_Mesh" (
                active = true
                prepend apiSchemas = ["SkelBindingAPI"]
            )
            {
                float3[] extent = [(-0.3511016, -0.20333333, -0.10666669), (1.3966668, 1.3966668, 1.1933333)]
                int[] faceVertexCounts = [4, 3, 3, 3, 3, 4, 3, 3, 4, 3, 3, 3, 3, 3, 3]
                int[] faceVertexIndices = [0, 1, 3, 2, 1, 4, 3, 4, 0, 2, 3, 4, 2, 1, 0, 4, 7, 6, 13, 5, 11, 9, 12, 9, 8, 12, 8, 10, 11, 12, 10, 9, 11, 10, 8, 9, 6, 14, 13, 14, 7, 5, 13, 14, 5, 6, 7, 14]
                normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0.12403471, 0, 0.99227786), (0.12403471, 0, 0.99227786), (0.12403471, 0, 0.99227786), (0.12403475, 0, -0.99227786), (0.12403475, 0, -0.99227786), (0.12403475, 0, -0.99227786), (0.24253559, 0.97014254, 0), (0.24253559, 0.97014254, 0), (0.24253559, 0.97014254, 0), (0.24253559, -0.97014254, 0), (0.24253559, -0.97014254, 0), (0.24253559, -0.97014254, 0), (7.326407e-8, 1.4901164e-7, -1), (7.326407e-8, 1.4901164e-7, -1), (7.326407e-8, 1.4901164e-7, -1), (7.326407e-8, 1.4901164e-7, -1), (-0.91709423, 0.39867038, 0), (-0.91709423, 0.39867038, 0), (-0.91709423, 0.39867038, 0), (-9.455046e-9, 0.1240347, -0.9922778), (-9.455046e-9, 0.1240347, -0.9922778), (-9.455046e-9, 0.1240347, -0.9922778), (8.6297014e-8, -1, 0), (8.6297014e-8, -1, 0), (8.6297014e-8, -1, 0), (8.6297014e-8, -1, 0), (0, 0.12403472, 0.99227786), (0, 0.12403472, 0.99227786), (0, 0.12403472, 0.99227786), (0.9191174, 0.39398378, 0), (0.9191174, 0.39398378, 0), (0.9191174, 0.39398378, 0), (-0.97014254, 2.2587896e-7, 0.24253556), (-0.97014254, 2.2587896e-7, 0.24253556), (-0.97014254, 2.2587896e-7, 0.24253556), (0.97014254, -2.9695556e-7, 0.24253574), (0.97014254, -2.9695556e-7, 0.24253574), (0.97014254, -2.9695556e-7, 0.24253574), (0, 0.97014236, 0.2425357), (0, 0.97014236, 0.2425357), (0, 0.97014236, 0.2425357), (-9.035156e-8, -0.9701425, 0.24253544), (-9.035156e-8, -0.9701425, 0.24253544), (-9.035156e-8, -0.9701425, 0.24253544)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(0.5966667, -0.20333333, -0.10666669), (0.5966667, -0.20333333, 0.09333332), (0.5966667, 0.19666664, -0.10666669), (0.5966667, 0.19666664, 0.09333332), (1.3966668, -0.003333345, -0.006666675), (0.19666673, 0.19666663, 0.39333338), (-0.20333338, -0.20333327, 0.39333332), (0.19666661, -0.20333333, 0.39333332), (0.3395902, 0.5966667, -0.10666666), (-0.0033333302, 1.3966668, -0.006666675), (0.3395902, 0.5966667, 0.09333331), (-0.3511016, 0.59666663, 0.09333331), (-0.3511016, 0.59666663, -0.10666666), (-0.20333326, 0.19666666, 0.39333338), (-0.0033333898, -0.0033334345, 1.1933333)]
                bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                    interpolation = "uniform"
                )
                matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                int[] primvars:skel:jointIndices = [1, 1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 2, 2, 3, 3] (
                    elementSize = 1
                    interpolation = "vertex"
                )
                float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                    elementSize = 1
                    interpolation = "vertex"
                )
                texCoord2f[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0), (0, 0), (0.625, 0.25), (0, 0), (0.375, 0), (0.375, 0.25), (0.625, 0.25), (0, 0), (0.375, 0.25), (0.625, 0), (0.375, 0), (0, 0), (0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.25), (0, 0), (0.375, 0.25), (0, 0), (0.375, 0), (0.375, 0.25), (0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0), (0, 0), (0.625, 0.25), (0.625, 0), (0.375, 0), (0, 0), (0.625, 0), (0, 0), (0.625, 0.25), (0, 0), (0.375, 0), (0.375, 0.25), (0.625, 0.25), (0, 0), (0.375, 0.25), (0.625, 0), (0.375, 0), (0, 0)] (
                    interpolation = "faceVarying"
                )
                rel skel:skeleton = </root/Armature_Object/Armature_Skeleton>
                uniform token subdivisionScheme = "none"
            }
        }
    }
}

