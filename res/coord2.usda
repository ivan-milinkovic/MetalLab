#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.2.2 LTS"
    endTimeCode = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def SkelRoot "Armature_Object"
    {
        float3 xformOp:rotateXYZ.timeSamples = {
            1: (0, -0, 0),
        }
        float3 xformOp:scale.timeSamples = {
            1: (1, 1, 1),
        }
        double3 xformOp:translate.timeSamples = {
            1: (0, 0, 0),
        }
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Skeleton "Armature_Skeleton" (
            prepend apiSchemas = ["SkelBindingAPI"]
        )
        {
            uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (0, 0, -1, 1) ), ( (0, 4.371138828673793e-8, -1, 0), (1, 0, 0, 0), (0, -1, -4.371138828673793e-8, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (0, 0, 0, 1) )]
            uniform token[] joints = ["Bone", "Bone/Bone_X", "Bone/Bone_Y", "Bone/Bone_Z"]
            uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (0, 0, -1, 1) ), ( (0, -1, -4.371138828673793e-8, 0), (1, 0, 0, 0), (0, -4.371138828673793e-8, 1, 0), (0, 1, 0, 1) ), ( (1, 0, 0, 0), (0, 0, -1, 0), (0, 1, 0, 0), (0, 1, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 1, 0, 1) )]
            rel skel:animationSource = </root/Armature_Object/Armature_Skeleton/Anim>

            def SkelAnimation "Anim"
            {
                uniform token[] joints = ["Bone", "Bone/Bone_X", "Bone/Bone_Y", "Bone/Bone_Z"]
                quatf[] rotations.timeSamples = {
                    1: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -1.545431e-8, -1.545431e-8, 0.70710677), (-0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0)],
                    2: [(0.70710677, 0.70710677, 0, 0), (-0.707001, -0.012232216, -0.012232216, 0.707001), (-0.707001, 0.707001, -0.0122322, 0.0122322), (0.99985033, 0, 0.017298944, 0)],
                    3: [(0.70710677, 0.70710677, 0, 0), (-0.70551395, -0.047434974, -0.047434974, 0.70551395), (-0.70551395, 0.70551395, -0.04743496, 0.04743496), (0.99774736, 0, 0.067083165, 0)],
                    4: [(0.70710677, 0.70710677, 0, 0), (-0.69954234, -0.103153035, -0.103153035, 0.69954234), (-0.69954234, 0.69954234, -0.10315303, 0.10315303), (0.9893022, 0, 0.14588042, 0)],
                    5: [(0.70710677, 0.70710677, 0, 0), (-0.68477166, -0.17631716, -0.17631716, 0.68477166), (-0.6847717, 0.6847717, -0.17631714, 0.17631714), (0.9684134, 0, 0.2493501, 0)],
                    6: [(0.70710677, 0.70710677, 0, 0), (-0.65644085, -0.26284105, -0.26284105, 0.65644085), (-0.65644085, 0.65644085, -0.26284102, 0.26284102), (0.9283475, 0, 0.37171334, 0)],
                    7: [(0.70710677, 0.70710677, 0, 0), (-0.6101544, -0.35736766, -0.35736766, 0.6101544), (-0.6101544, 0.6101544, -0.35736766, 0.35736766), (0.8628886, 0, 0.5053942, 0)],
                    8: [(0.70710677, 0.70710677, 0, 0), (-0.5427039, -0.45329064, -0.45329064, 0.5427039), (-0.542704, 0.542704, -0.45329064, 0.45329064), (0.7674993, 0, 0.6410498, 0)],
                    9: [(0.70710677, 0.70710677, 0, 0), (0.45279998, 0.5431134, 0.5431134, -0.45279998), (-0.45279998, 0.45279998, -0.5431134, 0.5431134), (0.6403559, 0, 0.7680783, 0)],
                    10: [(0.70710677, 0.70710677, 0, 0), (0.34157568, 0.6191333, 0.6191333, -0.34157568), (-0.34157568, 0.34157568, -0.6191333, 0.6191333), (0.48306096, 0, 0.87558675, 0)],
                    11: [(0.70710677, 0.70710677, 0, 0), (0.21273497, 0.674347, 0.674347, -0.21273497), (-0.21273498, 0.21273498, -0.674347, 0.674347), (0.3008527, 0, 0.9536706, 0)],
                    12: [(0.70710677, 0.70710677, 0, 0), (0.07226616, 0.7034043, 0.7034043, -0.07226616), (-0.07226618, 0.07226618, -0.7034043, 0.7034043), (0.102199815, 0, 0.9947639, 0)],
                    13: [(0.70710677, 0.70710677, 0, 0), (-0.07226626, 0.7034043, 0.7034043, 0.07226626), (0.07226624, -0.07226624, -0.7034043, 0.7034043), (-0.1021999, 0, 0.9947639, 0)],
                    14: [(0.70710677, 0.70710677, 0, 0), (-0.21273498, 0.674347, 0.674347, 0.21273498), (0.21273497, -0.21273497, -0.674347, 0.674347), (-0.30085266, 0, 0.9536706, 0)],
                    15: [(0.70710677, 0.70710677, 0, 0), (-0.34157568, 0.6191333, 0.6191333, 0.34157568), (0.34157565, -0.34157565, -0.6191333, 0.6191333), (-0.48306093, 0, 0.87558675, 0)],
                    16: [(0.70710677, 0.70710677, 0, 0), (-0.4528001, 0.5431133, 0.5431133, 0.4528001), (0.4528001, -0.4528001, -0.5431133, 0.5431133), (-0.640356, 0, 0.7680782, 0)],
                    17: [(0.70710677, 0.70710677, 0, 0), (-0.54270405, 0.45329052, 0.45329052, 0.54270405), (-0.54270405, 0.54270405, 0.45329052, -0.45329052), (0.76749945, 0, -0.6410496, 0)],
                    18: [(0.70710677, 0.70710677, 0, 0), (-0.61015445, 0.3573675, 0.3573675, 0.61015445), (-0.61015445, 0.61015445, 0.35736752, -0.35736752), (0.8628887, 0, -0.505394, 0)],
                    19: [(0.70710677, 0.70710677, 0, 0), (-0.656441, 0.26284078, 0.26284078, 0.656441), (-0.656441, 0.656441, 0.2628408, -0.2628408), (0.9283477, 0, -0.371713, 0)],
                    20: [(0.70710677, 0.70710677, 0, 0), (-0.6847717, 0.17631695, 0.17631695, 0.6847717), (-0.6847717, 0.6847717, 0.17631696, -0.17631696), (0.9684135, 0, -0.24934983, 0)],
                    21: [(0.70710677, 0.70710677, 0, 0), (-0.69954234, 0.10315278, 0.10315278, 0.69954234), (-0.69954234, 0.69954234, 0.10315279, -0.10315279), (0.9893023, 0, -0.14588007, 0)],
                    22: [(0.70710677, 0.70710677, 0, 0), (-0.70551395, 0.047434606, 0.047434606, 0.70551395), (-0.70551395, 0.70551395, 0.04743462, -0.04743462), (0.9977474, 0, -0.06708269, 0)],
                    23: [(0.70710677, 0.70710677, 0, 0), (-0.707001, 0.0122318445, 0.0122318445, 0.707001), (-0.707001, 0.707001, 0.01223186, -0.01223186), (0.9998504, 0, -0.017298464, 0)],
                    24: [(0.70710677, 0.70710677, 0, 0), (-0.70710677, -7.727155e-8, -7.727155e-8, 0.70710677), (-0.70710677, 0.70710677, -6.181724e-8, 6.181724e-8), (1, 0, 8.742278e-8, 0)],
                }
                half3[] scales.timeSamples = {
                    1: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    2: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    3: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    4: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    5: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    6: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    7: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    8: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    9: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    10: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    11: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    12: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    13: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    14: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    15: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    16: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    17: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    18: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    19: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    20: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    21: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    22: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    23: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                    24: [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)],
                }
                float3[] translations.timeSamples = {
                    1: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    2: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    3: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    4: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    5: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    6: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    7: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    8: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    9: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    10: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    11: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    12: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    13: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    14: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    15: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    16: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    17: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    18: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    19: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    20: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    21: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    22: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    23: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                    24: [(0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
                }
            }
        }

        def Xform "Coord_Object"
        {
            def Mesh "Coord_Mesh" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI", "SkelBindingAPI"]
            )
            {
                uniform bool doubleSided = 1
                float3[] extent = [(-0.3511016, -0.20333333, -0.10666669), (1.3966668, 1.3966668, 1.1933333)]
                int[] faceVertexCounts = [4, 3, 3, 3, 3, 4, 3, 3, 4, 3, 3, 3, 3, 3, 3]
                int[] faceVertexIndices = [0, 1, 3, 2, 1, 4, 3, 4, 0, 2, 3, 4, 2, 1, 0, 4, 7, 6, 13, 5, 11, 9, 12, 9, 8, 12, 8, 10, 11, 12, 10, 9, 11, 10, 8, 9, 6, 14, 13, 14, 7, 5, 13, 14, 5, 6, 7, 14]
                rel material:binding = </root/_materials/Material_X>
                normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0.12403471, 0, 0.99227786), (0.12403471, 0, 0.99227786), (0.12403471, 0, 0.99227786), (0.12403475, 0, -0.99227786), (0.12403475, 0, -0.99227786), (0.12403475, 0, -0.99227786), (0.24253559, 0.97014254, 0), (0.24253559, 0.97014254, 0), (0.24253559, 0.97014254, 0), (0.24253559, -0.97014254, 0), (0.24253559, -0.97014254, 0), (0.24253559, -0.97014254, 0), (7.326407e-8, 1.4901164e-7, -1), (7.326407e-8, 1.4901164e-7, -1), (7.326407e-8, 1.4901164e-7, -1), (7.326407e-8, 1.4901164e-7, -1), (-0.91709423, 0.39867038, 0), (-0.91709423, 0.39867038, 0), (-0.91709423, 0.39867038, 0), (-9.455046e-9, 0.1240347, -0.9922778), (-9.455046e-9, 0.1240347, -0.9922778), (-9.455046e-9, 0.1240347, -0.9922778), (8.6297014e-8, -1, 0), (8.6297014e-8, -1, 0), (8.6297014e-8, -1, 0), (8.6297014e-8, -1, 0), (0, 0.12403472, 0.99227786), (0, 0.12403472, 0.99227786), (0, 0.12403472, 0.99227786), (0.9191174, 0.39398378, 0), (0.9191174, 0.39398378, 0), (0.9191174, 0.39398378, 0), (-0.97014254, 2.2587896e-7, 0.24253556), (-0.97014254, 2.2587896e-7, 0.24253556), (-0.97014254, 2.2587896e-7, 0.24253556), (0.97014254, -2.9695556e-7, 0.24253574), (0.97014254, -2.9695556e-7, 0.24253574), (0.97014254, -2.9695556e-7, 0.24253574), (0, 0.97014236, 0.2425357), (0, 0.97014236, 0.2425357), (0, 0.97014236, 0.2425357), (-9.035156e-8, -0.9701425, 0.24253544), (-9.035156e-8, -0.9701425, 0.24253544), (-9.035156e-8, -0.9701425, 0.24253544)] (
                    interpolation = "faceVarying"
                )
                point3f[] points = [(0.5966667, -0.20333333, -0.10666669), (0.5966667, -0.20333333, 0.09333332), (0.5966667, 0.19666664, -0.10666669), (0.5966667, 0.19666664, 0.09333332), (1.3966668, -0.003333345, -0.006666675), (0.19666673, 0.19666663, 0.39333338), (-0.20333338, -0.20333327, 0.39333332), (0.19666661, -0.20333333, 0.39333332), (0.3395902, 0.5966667, -0.10666666), (-0.0033333302, 1.3966668, -0.006666675), (0.3395902, 0.5966667, 0.09333331), (-0.3511016, 0.59666663, 0.09333331), (-0.3511016, 0.59666663, -0.10666666), (-0.20333326, 0.19666666, 0.39333338), (-0.0033333898, -0.0033334345, 1.1933333)]
                bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                    interpolation = "uniform"
                )
                matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                int[] primvars:skel:jointIndices = [1, 1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 2, 2, 3, 3] (
                    elementSize = 1
                    interpolation = "vertex"
                )
                float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                    elementSize = 1
                    interpolation = "vertex"
                )
                texCoord2f[] primvars:st = [(0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0), (0, 0), (0.625, 0.25), (0, 0), (0.375, 0), (0.375, 0.25), (0.625, 0.25), (0, 0), (0.375, 0.25), (0.625, 0), (0.375, 0), (0, 0), (0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.25), (0, 0), (0.375, 0.25), (0, 0), (0.375, 0), (0.375, 0.25), (0.375, 0), (0.625, 0), (0.625, 0.25), (0.375, 0.25), (0.625, 0), (0, 0), (0.625, 0.25), (0.625, 0), (0.375, 0), (0, 0), (0.625, 0), (0, 0), (0.625, 0.25), (0, 0), (0.375, 0), (0.375, 0.25), (0.625, 0.25), (0, 0), (0.375, 0.25), (0.625, 0), (0.375, 0), (0, 0)] (
                    interpolation = "faceVarying"
                )
                rel skel:skeleton = </root/Armature_Object/Armature_Skeleton>
                uniform token subdivisionScheme = "none"
                uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

                def GeomSubset "Material_X" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token elementType = "face"
                    uniform token familyName = "materialBind"
                    int[] indices = [0, 1, 2, 3, 4]
                    rel material:binding = </root/_materials/Material_X>
                }

                def GeomSubset "Material_Y" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token elementType = "face"
                    uniform token familyName = "materialBind"
                    int[] indices = [6, 7, 8, 9, 10]
                    rel material:binding = </root/_materials/Material_Y>
                }

                def GeomSubset "Material_Z" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token elementType = "face"
                    uniform token familyName = "materialBind"
                    int[] indices = [5, 11, 12, 13, 14]
                    rel material:binding = </root/_materials/Material_Z>
                }
            }
        }
    }

    def Scope "_materials"
    {
        def Material "Material_X"
        {
            token outputs:surface.connect = </root/_materials/Material_X/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.80022764, 0, 0.0026425465)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.5
                float inputs:specular = 0.5
                token outputs:surface
            }
        }

        def Material "Material_Y"
        {
            token outputs:surface.connect = </root/_materials/Material_Y/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.01190576, 0.80073506, 0)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.5
                float inputs:specular = 0.5
                token outputs:surface
            }
        }

        def Material "Material_Z"
        {
            token outputs:surface.connect = </root/_materials/Material_Z/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0, 0.24902663, 0.8026136)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.5
                float inputs:specular = 0.5
                token outputs:surface
            }
        }
    }
}

